Deploying
=========

.. _section-deploy:

The ``deploy`` section
----------------------

At the end of the build process, dbuild can automatically upload the generated artifacts to one or more
repositories. The ``deploy`` section in the build configuration file is optional; it consists of a sequence
of deploy records, with the following structure:

.. code-block:: javascript

   {
    "uri"         : <repository-uri>,
    "credentials" : <optional-credentials>,
    "projects"    : [<project1>,<project2>,...]
   }

Within a record:

repository-uri
  A string specifying the URI of the desired repository; it can be written either with or
  without a trailing slash. It can be one of the following:

  ``file:///path/to/local/repository``
    The artifacts will be copied to the local file system. The directory will be created
    if it does not exist. Existing files in that directory with colliding names will be
    overwritten; the other files that were previously in the same directory will be left
    untouched.

  ``http://hostname:port/path1/path2``
    A Maven or Ivy (or other) remote repository. It can also use the "https" scheme, and
    a custom port may optionally be specified. A credentials file is required (see later).

  ``s3://bucket/path1/path2``
    The artifacts will be uploaded to an Amazon S3 bucket. Credentials must be specified.

credentials
  A properties file containing at least the properties "host", "user", and "password". The
  value of the "host" property must match the hostname or the bucket name. In the case of
  Amazon S3, the property "user" contains the Access Key ID, while the property "password"
  contains the Secret Access Key. The credentials specification should be omitted for ``file``
  repositories.

projects
  An optional list of project names, from the ones specified in the same build configuration file.
  Only the artifacts generated by this projects will be deployed to the repository specified. If
  not present, the artifacts of all projects will be uploaded.

In place of a project name, it is also possible to specify a limited set of subprojects from
a certain project. That will also work for the Scala build; it is possible to deploy to a
certain repository only scala-library and scala-compiler, for example. The syntax is:

.. code-block:: javascript

   {
    "from"    : <project-name>,
    "publish" : [<subproject1>,<subproject2>,...]
   }


Using such a sequence of deploy records, it is possible to deploy diffent sets of artifacts to different
repositories, or to upload the same artifacts to multiple repositories during a single run. For example:

.. code-block:: javascript

  "deploy":[
    {
      uri="file:///home/user/files/repo"
      projects:["genjavadoc",{from:"akka",publish:"akka-actor"}]
    },
    {
      uri="s3://s3-testBucket/repo"
      credentials="/home/user/.credentials-s3"
      projects=["scala-arm"]
    },
    {
      uri="http://localhost:8088/artifactory/repos/test1"
      credentials="/home/user/.ivy2/.credentials-local"
      projects=["genjavadoc","akka","scala","scala-arm"]
    }
  ]


.. Note::

  If you encounter an error ``404`` while deploying, that may be caused by an attempt to upload a checksum file
  (.sha1 or .md5) that has no corresponding main file. This should normally never happen, but it may be the result
  of some anomalous build/clean error during the build stage.

  Similarly, an error ``409`` may occur when the checksum file that was generated during the build stage does
  not match the checksum that was calculated on the server during the deployment of the main file. Again, this
  may be the result of some unexpected build anomaly, or it may be caused by a failure while uploading the artifact
  files to the repository server.

*Next:* :doc:`repositories`.
