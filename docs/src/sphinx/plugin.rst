The sbt plugin
==============

Usage
-----

The dbuild sbt plugin should be configured beforehand, either as a global plugin
(as described in the section :ref:`installing-sbt`), or by adding it to your current project (see
`the sbt manual <http://www.scala-sbt.org/release/docs/Extending/Plugins>`_ for more details).

Once that is done, just start sbt for your project as usual.

Reloading a dbuild configuration
--------------------------------

Once sbt has started, you can reload the artifacts and prepare your debugging environment by using the
`dbuild-setup` command, as follows:

.. code-block:: bash

   $ bin/dbuild <dbuild-build-hash> [<dbuild-project-name>]

Where `dbuild-build-hash` is the ID of the build, and the optional `dbuild-project-name` is the name of
your project, as specified in the build configuration file. For example:

.. code-block:: bash

   $ sbt
   [...]
   [info] Set current project to sperformance (in build file:[...]/sperformance/)
   > dbuild-setup 48baab8156458005cb2e0569e8e8c2c39221d56e sperformance
   [info] Retrieving dependencies for 9fc2901cdc4f1e4ce4209bfad5dfbf02633fcd5f sperformance
   [info] Retrieved from project 26a265808a6abe8e8451a9f0b43d6dc02176ed16: 10 artifacts
   [info] Updating dependencies...
   [info] Adding resolvers to retrieve build artifacts in 1 scopes
   [info] Updating library dependencies in 2 scopes
   [info] Setting Scala version to: 2.10.2-20130320-161312-2f3a7fa417 in 2 scopes
   [info] Disabling cross building in 2 scopes
   [info] Preparing Scala binaries: version 2.10.2-20130320-161312-2f3a7fa417
   [info] Setting Scala home in 1 scopes
   [info] Set current project to sperformance (in build file:/[...]/sperformance/)
   >

This command will reload all the artifacts that are dependencies of the specified project, as built by that
dbuild run, adapt the sbt resolvers, and prepare your environment for debugging. If you leave out the project
name, all of the artifacts of all known projects in the dbuild will be reloaded; this can be useful to test
a different project that was *not* part of the build against the full set of custom versioned artifacts
generated by that dbuild run.

Notably, the code version of the project that you are debugging need not match the version of the same project
tested during the dbuild build. That makes it possible to test the generated artifacts against an arbitrary
version, for instance your custom development or debugging branch.

Reloading artifacts
-------------------

The dbuild repository uses a custom layout, and the artifacts that it contains are not directly accessible by Maven/Ivy.
It is possible to publish the artifacts by using the configuration described in :ref:`section-deploy`. Even if the
artifacts have not been deployed, however, it is very easy to reconstruct a Maven/Ivy repository containing the
artifacts generated by dbuild for a given project. After setting up the dbuild sbt plugin, just cd to an empty
directory, and type a line like:

.. code-block:: bash

   $ sbt 'dbuild-setup 48baab8156458005cb2e0569e8e8c2c39221d56e akka'

where the hash is the repeateable build UUID, and it is followed by the name of the project whose artifacts should be
reloaded. Once sbt completes, you will find a local repository in the subdirectory ``.dbuild/local-repo`` of your
current directory.

|

*Next:* :doc:`caveats`.

